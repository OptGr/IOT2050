/**
 * Opc UA via MQTT - Token Rotation
 *
 * @export
 * @class MqttOpcUaAuth
 * @implements {TokenRotation}
 */
export declare class MqttOpcUaAuth {
    private _clientid;
    private _rootca;
    private _devicecrt;
    private _expiration;
    private _devicekey;
    private _intermediate?;
    private _passphrase?;
    private _tenant?;
    /**
     * Creates an instance of MqttOpcUaAuth.
     * @param {string} _clientid
     * @param {string} _rootca
     * @param {string} _devicecrt
     * @param {number} _expiration
     * @param {string} _devicekey
     * @param {string} [_intermediate]
     * @param {string} [_passphrase]
     * @param {string} [_tenant]
     *
     * @memberOf MqttOpcUaAuth
     */
    constructor(_clientid: string, _rootca: string, _devicecrt: string, _expiration: number, _devicekey: string, _intermediate?: string | undefined, _passphrase?: string | undefined, _tenant?: string | undefined);
    private _token?;
    GetMqttToken(): string;
    private ValidateToken;
    private CreateToken;
    /**
     * renews the token if expired
     *
     * @returns {Promise<boolean>}
     *
     * @memberOf MqttOpcUaAuth
     */
    RenewToken(): Promise<boolean>;
}
