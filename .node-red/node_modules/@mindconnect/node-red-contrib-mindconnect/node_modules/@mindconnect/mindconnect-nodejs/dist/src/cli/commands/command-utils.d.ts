import { AssetManagementModels, MindSphereSdk } from "../../api/sdk";
export declare function checkForUpdates(): void;
export declare const serviceCredentialLog: (color?: Function) => void;
export declare function colorizeStatus(message: string): any;
export declare const subtractSecond: (date: Date, seconds: number) => Date;
export declare const displayCsvHelp: (color: (chalk: string) => string) => void;
export declare const directoryReadyLog: ({ path, runCommand, jobCommand, }: {
    path: string;
    runCommand: string;
    jobCommand: string;
}) => void;
export declare function modeInformation(asset: AssetManagementModels.AssetResourceWithHierarchyPath, options: any, color: any): void;
export declare function getColor(name: string): any;
export declare function adjustColor(color: any, options: any, analyticcommand?: boolean): any;
export declare function getSdk(options: any): MindSphereSdk;
export declare function agentConfigLog({ gateway, host, tenant, agentid, color, }: {
    gateway: string;
    host: string;
    tenant: string;
    agentid: string | undefined;
    color: Function;
}): void;
export declare const errorLog: (err: any, verbose: any) => never;
export declare const verboseLog: (message: any, verbose: any, spinner?: any) => void;
export declare const proxyLog: (verbose: any, color: Function) => void;
export declare const homeDirLog: (verbose: any, color: Function) => void;
export declare const retrylog: (operation: string, c?: Function) => () => void;
export declare const humanFileSize: (size: number) => string;
export declare function generateTestData(size: number, fn: (x: number) => number | undefined, variableName?: string, format?: "string" | "number"): any[];
export declare function buildFilter(options: any): any;
export declare function printObjectInfo(title: string, dto: object, options: any, coloredProperties: Array<string>, color: Function, depth?: number): void;
export declare function isPrimitive(x: any): boolean;
export declare function humanReadableDate(comparisonDate: Date): string;
