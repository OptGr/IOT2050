"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkClient = void 0;
const browser_auth_1 = require("../../browser-auth");
const credential_auth_1 = require("../../credential-auth");
const mindconnect_base_1 = require("../../mindconnect-base");
const tokenmanager_auth_1 = require("../../tokenmanager-auth");
const credentials_1 = require("./credentials");
class SdkClient {
    /**
     * * Creates a client for MinSphere API
     *
     * @param {(TokenRotation | ServiceCrendtials | AppCredentials)} [credentialsOrAuthorizer]
     *
     * you can pass either an instance an Authorizer:
     * UserAuth, BrowserAuth, CredentialsAuth, TokenManagerAuth or MindConnectAgent
     *
     * or a set of Credentials:
     * ServiceCredentials or AppCredentials
     *
     * implement the TokenRotation interface if you want to provide your own authorizer.
     *
     * The default constructor uses frontend authorization.
     *
     * @memberOf SdkClient
     */
    constructor(credentialsOrAuthorizer) {
        if (credentialsOrAuthorizer === undefined) {
            this._authenticator = new browser_auth_1.BrowserAuth();
        }
        else if ((0, mindconnect_base_1.isTokenRotation)(credentialsOrAuthorizer)) {
            this._authenticator = credentialsOrAuthorizer;
        }
        else if ((0, credentials_1.isAppCredentials)(credentialsOrAuthorizer)) {
            const appCredentials = credentialsOrAuthorizer;
            this._authenticator = new tokenmanager_auth_1.TokenManagerAuth(appCredentials.gateway, appCredentials.basicAuth, appCredentials.tenant, appCredentials.usertenant, appCredentials.appName, appCredentials.appVersion);
        }
        else if ((0, credentials_1.isServiceCredentials)(credentialsOrAuthorizer)) {
            const credentialsAuth = credentialsOrAuthorizer;
            this._authenticator = new credential_auth_1.CredentialAuth(credentialsAuth.gateway, credentialsAuth.basicAuth, credentialsAuth.tenant);
        }
        else {
            throw new Error("invalid constructor");
        }
    }
    GetToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._authenticator.GetToken();
        });
    }
    RenewToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._authenticator.RenewToken();
        });
    }
    GetGateway() {
        return this._authenticator.GetGateway();
    }
    GetTenant() {
        return this._authenticator.GetTenant();
    }
    HttpAction({ verb, gateway, baseUrl, authorization, body, message, octetStream, multiPartFormData, additionalHeaders, noResponse, rawResponse, returnHeaders, ignoreCodes, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._authenticator.HttpAction({
                verb,
                gateway,
                baseUrl,
                authorization,
                body,
                message,
                octetStream,
                multiPartFormData,
                additionalHeaders,
                noResponse,
                rawResponse,
                returnHeaders,
                ignoreCodes,
            });
        });
    }
}
exports.SdkClient = SdkClient;
//# sourceMappingURL=sdk-client.js.map