"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const jwt = require("jsonwebtoken");
const __1 = require("../..");
const command_utils_1 = require("./command-utils");
let color = (0, command_utils_1.getColor)("magenta");
exports.default = (program) => {
    program
        .command("service-token")
        .alias("stk")
        .option("-k, --passkey <passkey>", "passkey")
        .option("-y, --retry <number>", "retry attempts before giving up", "3")
        .option("-v, --verbose", "verbose output")
        .description(color(`displays the service token for use in other tools (e.g. postman) *`))
        .action((options) => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            try {
                // checkRequiredParamaters(options);
                const sdk = (0, command_utils_1.getSdk)(options);
                color = (0, command_utils_1.adjustColor)(color, options);
                (0, command_utils_1.homeDirLog)(options.verbose, color);
                (0, command_utils_1.proxyLog)(options.verbose, color);
                if (options._selected_mode === "cookie") {
                    console.log(`borrowed cookie authentication is using ${color("cookies")} and not using tokens`);
                    (0, command_utils_1.verboseLog)(`${color("MDSP_SESSION")}=${process.env.MDSP_SESSION}`, options.verbose);
                    (0, command_utils_1.verboseLog)(`${color("MDSP_XSRF_TOKEN")}=${process.env.MDSP_XSRF_TOKEN}`, options.verbose);
                    (0, command_utils_1.verboseLog)(`${color("MDSP_HOST")}=${process.env.MDSP_HOST}`, options.verbose);
                }
                else {
                    let token = "";
                    yield (0, __1.retry)(options.retry, () => __awaiter(void 0, void 0, void 0, function* () { return (token = yield sdk.GetToken()); }), 300, (0, command_utils_1.retrylog)("GetToken"));
                    (0, console_1.log)(token);
                    (0, command_utils_1.verboseLog)("decoded token:\n", options.verbose);
                    (0, command_utils_1.verboseLog)(JSON.stringify(jwt.decode(token, { complete: true }), null, 2), options.verbose);
                }
            }
            catch (err) {
                (0, command_utils_1.errorLog)(err, options.verbose);
            }
        }))();
    })
        .on("--help", () => {
        (0, console_1.log)("\n  Examples:\n");
        (0, console_1.log)(`    mc service-token --passkey mypasskey \t\tdisplays the service token (encoded only)`);
        (0, console_1.log)(`    mc service-token --passkey mypasskey --verbose \tdisplays the service token (encoded and decoded)`);
        (0, command_utils_1.serviceCredentialLog)();
    });
};
//# sourceMappingURL=mc-service-token.js.map