"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetManagementModels = void 0;
var AssetManagementModels;
(function (AssetManagementModels) {
    // ! fix (3.13.0): manual fixes for Asset Management Data Types
    // ! fix (3.13.0): search for export interface.*\{\} , check if they are Ids and replace them with string types instead
    class RequiredError extends Error {
        constructor(field, msg) {
            super(msg);
            this.field = field;
            this.name = "RequiredError";
        }
    }
    AssetManagementModels.RequiredError = RequiredError;
    /**
     * @export
     * @namespace AspectResource
     */
    let AspectResource;
    (function (AspectResource) {
        /**
         * @export
         * @enum {string}
         */
        let CategoryEnum;
        (function (CategoryEnum) {
            CategoryEnum["Dynamic"] = "dynamic";
            CategoryEnum["Static"] = "static";
        })(CategoryEnum = AspectResource.CategoryEnum || (AspectResource.CategoryEnum = {}));
    })(AspectResource = AssetManagementModels.AspectResource || (AssetManagementModels.AspectResource = {}));
    /**
     * @export
     * @namespace AspectType
     */
    let AspectType;
    (function (AspectType) {
        /**
         * @export
         * @enum {string}
         */
        let CategoryEnum;
        (function (CategoryEnum) {
            CategoryEnum["Static"] = "static";
            CategoryEnum["Dynamic"] = "dynamic";
        })(CategoryEnum = AspectType.CategoryEnum || (AspectType.CategoryEnum = {}));
        /**
         * @export
         * @enum {string}
         */
        let ScopeEnum;
        (function (ScopeEnum) {
            ScopeEnum["Public"] = "public";
            ScopeEnum["Private"] = "private";
        })(ScopeEnum = AspectType.ScopeEnum || (AspectType.ScopeEnum = {}));
    })(AspectType = AssetManagementModels.AspectType || (AssetManagementModels.AspectType = {}));
    /**
     * @export
     * @namespace AssetTypeBase
     */
    let AssetTypeBase;
    (function (AssetTypeBase) {
        /**
         * @export
         * @enum {string}
         */
        let ScopeEnum;
        (function (ScopeEnum) {
            ScopeEnum["Public"] = "public";
            ScopeEnum["Private"] = "private";
        })(ScopeEnum = AssetTypeBase.ScopeEnum || (AssetTypeBase.ScopeEnum = {}));
    })(AssetTypeBase = AssetManagementModels.AssetTypeBase || (AssetManagementModels.AssetTypeBase = {}));
    /**
     * @export
     * @namespace FileMetadataResource
     */
    let FileMetadataResource;
    (function (FileMetadataResource) {
        /**
         * @export
         * @enum {string}
         */
        let ScopeEnum;
        (function (ScopeEnum) {
            ScopeEnum["Public"] = "public";
            ScopeEnum["Private"] = "private";
        })(ScopeEnum = FileMetadataResource.ScopeEnum || (FileMetadataResource.ScopeEnum = {}));
    })(FileMetadataResource = AssetManagementModels.FileMetadataResource || (AssetManagementModels.FileMetadataResource = {}));
    /**
     * @export
     * @namespace SharingResource
     */
    let SharingResource;
    (function (SharingResource) {
        /**
         * @export
         * @enum {string}
         */
        let ModesEnum;
        (function (ModesEnum) {
            ModesEnum["SHARER"] = "SHARER";
            ModesEnum["RECEIVER"] = "RECEIVER";
        })(ModesEnum = SharingResource.ModesEnum || (SharingResource.ModesEnum = {}));
    })(SharingResource = AssetManagementModels.SharingResource || (AssetManagementModels.SharingResource = {}));
    /**
     * Indicates that the asset is a real asset (performance) or for simulation. If omitted on creation then it defaults to performance. Setting the twinType to simulation allows high resolution timestamps (microsecond precision).
     * @export
     * @enum {string}
     */
    let TwinType;
    (function (TwinType) {
        TwinType["Performance"] = "performance";
        TwinType["Simulation"] = "simulation";
    })(TwinType = AssetManagementModels.TwinType || (AssetManagementModels.TwinType = {}));
    /**
     * @export
     * @namespace VariableDefinition
     */
    let VariableDefinition;
    (function (VariableDefinition) {
        /**
         * @export
         * @enum {string}
         */
        let DataTypeEnum;
        (function (DataTypeEnum) {
            DataTypeEnum["BOOLEAN"] = "BOOLEAN";
            DataTypeEnum["INT"] = "INT";
            DataTypeEnum["LONG"] = "LONG";
            DataTypeEnum["DOUBLE"] = "DOUBLE";
            DataTypeEnum["STRING"] = "STRING";
            DataTypeEnum["TIMESTAMP"] = "TIMESTAMP";
            DataTypeEnum["BIGSTRING"] = "BIG_STRING";
        })(DataTypeEnum = VariableDefinition.DataTypeEnum || (VariableDefinition.DataTypeEnum = {}));
    })(VariableDefinition = AssetManagementModels.VariableDefinition || (AssetManagementModels.VariableDefinition = {}));
})(AssetManagementModels = exports.AssetManagementModels || (exports.AssetManagementModels = {}));
//# sourceMappingURL=asset-models.js.map