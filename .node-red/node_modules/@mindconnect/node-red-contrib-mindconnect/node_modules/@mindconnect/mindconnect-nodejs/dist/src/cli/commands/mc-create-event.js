"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const fs = require("fs");
const os = require("os");
const path = require("path");
const __1 = require("../..");
const command_utils_1 = require("./command-utils");
const mc_upload_file_1 = require("./mc-upload-file");
const ora = require("ora");
let color = (0, command_utils_1.getColor)("cyan");
let adminColor = (0, command_utils_1.getColor)("magenta");
exports.default = (program) => {
    program
        .command("create-event")
        .alias("ce")
        .option("-c, --config <agentconfig>", "config file with agent configuration")
        .option("-r, --cert [privatekey]", "required for agents with RSA_3072 profile. create with: openssl genrsa -out private.key 3072")
        .option("-i, --assetid <assetid>", "mindsphere asset id  (default: send event to the agent)")
        .option("-y, --sourceType <sourceType>", "Source Type", "MindConnect-Agent")
        .option("-S, --sourceId <sourceId>", "Source Id", os.hostname() || "")
        .option("-O, --source <source>", "Source", "MindConnect-NodeJs CLI")
        .option("-V, --severity <severity>", "Severity (20:Error, 30:Warning , 40:information)", "20")
        .option("-d, --desc <description>", "Event description", "CLI created event")
        .option("-t, --timestamp <timestamp>", "Timestamp", new Date().toISOString())
        .option("-y, --retry <number>", "retry attempts before giving up", "3")
        .option("-p, --passkey <passkey>", `passkey (optional, event creation uses ${adminColor("service credentials *")})`)
        .option("-v, --verbose", "verbose output")
        .description(`${color("create an event in the mindsphere")} ${adminColor("(optional: passkey) *")}`)
        .action((options) => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            try {
                adminColor = (0, command_utils_1.adjustColor)(adminColor, options);
                color = options.config === undefined ? adminColor : color;
                checkParameters(options);
                (0, command_utils_1.homeDirLog)(options.verbose, color);
                (0, command_utils_1.proxyLog)(options.verbose, color);
                const spinner = ora("creating event");
                !options.verbose && spinner.start();
                if (options.config) {
                    const configFile = path.resolve(options.config);
                    (0, command_utils_1.verboseLog)(`Event upload using the agent configuration stored in: ${color(configFile)}.`, options.verbose);
                    if (!fs.existsSync(configFile)) {
                        throw new Error(`Can't find file ${configFile}`);
                    }
                }
                let uploader;
                let assetid = options.assetid;
                if (options.config) {
                    ({ assetid, uploader } = yield (0, mc_upload_file_1.getMindConnectAgent)(assetid, options, spinner, color));
                }
                else {
                    uploader = getEventManager(options);
                }
                const event = {
                    entityId: assetid,
                    sourceType: options.sourceType,
                    sourceId: options.sourceId,
                    source: options.source,
                    severity: parseInt(options.severity),
                    timestamp: options.timestamp,
                    description: options.desc,
                };
                (0, command_utils_1.verboseLog)(`creating event : ${JSON.stringify(event)}`, options.verbose, spinner);
                (0, command_utils_1.verboseLog)(`AssetId ${assetid}`, options.verbose, spinner);
                (0, command_utils_1.verboseLog)(options.assetid === undefined ? "Sending event to agent." : "Sending event to another asset.", options.verbose, spinner);
                yield (0, __1.retry)(options.retry, () => uploader.PostEvent(event), 300, (0, command_utils_1.retrylog)("PostEvent"));
                !options.verbose && spinner.succeed("Done");
                (0, console_1.log)(`Your event with severity ${color(event.severity + "")} was succesfully created.`);
            }
            catch (err) {
                (0, command_utils_1.errorLog)(err, options.verbose);
            }
        }))();
    })
        .on("--help", () => {
        (0, console_1.log)("\n  Examples:\n");
        (0, console_1.log)(`    mc create-event \t\t\t\t create error event with default values and current timestamp`);
        (0, console_1.log)(`    mc ce --desc Warning! --severity 30 \t create warning with description warning`);
        (0, console_1.log)(`    mc ce --desc \"custom event\" --i 123....4 \t create error event for asset with id 123....4`);
    });
};
function getEventManager(options) {
    const sdk = (0, command_utils_1.getSdk)(options);
    const uploader = sdk.GetEventManagementClient();
    return uploader;
}
function checkParameters(options) {
    options.passkey &&
        !options.assetid &&
        (0, command_utils_1.errorLog)(" You have to specify assetid when using service credential upload", true);
}
//# sourceMappingURL=mc-create-event.js.map