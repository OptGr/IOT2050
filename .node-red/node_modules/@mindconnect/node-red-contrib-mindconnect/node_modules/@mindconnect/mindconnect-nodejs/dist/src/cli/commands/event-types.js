"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const fs = require("fs");
const __1 = require("../..");
const command_utils_1 = require("./command-utils");
const path = require("path");
let color = (0, command_utils_1.getColor)("magenta");
exports.default = (program) => {
    program
        .command("event-types")
        .alias("et")
        .option("-m, --mode [list|create|delete|template|info]", "list | create | delete | template | info", "list")
        .option("-f, --file <file>", ".mdsp.json file with event type definition")
        .option("-i, --idonly", "list only ids")
        .option("-s, --schema <schema>", "JSON Schema")
        .option("-n, --eventtype <eventtype>", "the event type name")
        .option("-c, --includeshared", "include shared event types")
        .option("-g, --includeglobal", "include global event types")
        .option("-k, --passkey <passkey>", "passkey")
        .option("-y, --retry <number>", "retry attempts before giving up", "3")
        .option("-v, --verbose", "verbose output")
        .description(color("list, create or delete event types *"))
        .action((options) => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            try {
                checkRequiredParamaters(options);
                const sdk = (0, command_utils_1.getSdk)(options);
                color = (0, command_utils_1.adjustColor)(color, options);
                (0, command_utils_1.homeDirLog)(options.verbose, color);
                (0, command_utils_1.proxyLog)(options.verbose, color);
                switch (options.mode) {
                    case "list":
                        yield listEventTypes(sdk, options);
                        break;
                    case "template":
                        createTemplate(options, sdk);
                        console.log("Edit the file before submitting it to MindSphere.");
                        break;
                    case "delete":
                        yield deleteEventType(options, sdk);
                        break;
                    case "create":
                        yield createEventType(options, sdk);
                        break;
                    case "info":
                        yield eventTypeInfo(options, sdk);
                        break;
                    default:
                        throw Error(`no such option: ${options.mode}`);
                }
            }
            catch (err) {
                (0, command_utils_1.errorLog)(err, options.verbose);
            }
        }))();
    })
        .on("--help", () => {
        (0, console_1.log)("\n  Examples:\n");
        (0, console_1.log)(`    mc event-types --mode list \t\t\t\t\t list all event types`);
        (0, console_1.log)(`    mc event-types --mode list --eventtype PumpEvent\t\t list all event types which are named PumpEvent`);
        (0, console_1.log)(`    mc event-types --mode template --eventtype PumpEvent \n\tcreate a template file (PumpEvent.eventtype.mdsp.json) for event type PumpEvent`);
        (0, console_1.log)(`    mc event-types --mode create --file PumpEvent.eventtype.mdsp.json \n\tcreate event type PumpEvent in MindSphere`);
        (0, command_utils_1.serviceCredentialLog)();
    });
};
function createEventType(options, sdk) {
    return __awaiter(this, void 0, void 0, function* () {
        const includeShared = options.includeshared;
        const filePath = path.resolve(options.file);
        const file = fs.readFileSync(filePath);
        const eventtype = JSON.parse(file.toString());
        const name = eventtype.name.includes(".") ? eventtype.name : `${sdk.GetTenant()}.${eventtype.name}`;
        yield sdk.GetEventManagementClient().PostEventType(eventtype, { includeShared: includeShared });
        console.log(`creted event type ${color(name)}`);
    });
}
function createTemplate(options, sdk) {
    const id = options.eventtype.includes(".")
        ? options.eventtype
        : `${sdk.GetTenant()}.${options.eventtype}`;
    const templateType = {
        id: `${id}`,
        name: `${options.eventtype}`,
        parentId: "string",
        ttl: 0,
        scope: "LOCAL",
        fields: [
            {
                name: "string",
                filterable: false,
                required: false,
                updatable: false,
                type: "STRING",
                values: ["string"],
            },
        ],
    };
    (0, command_utils_1.verboseLog)(JSON.stringify(templateType, null, 2), options.verbose);
    writeEventTypeToFile(options, templateType);
}
function writeEventTypeToFile(options, EventType) {
    const fileName = options.file || `${options.eventtype}.eventtype.mdsp.json`;
    fs.writeFileSync(fileName, JSON.stringify(EventType, null, 2));
    console.log(`The data was written into ${color(fileName)} run \n\n\tmc event-types --mode create --file ${fileName} \n\nto create the event type`);
}
function deleteEventType(options, sdk) {
    return __awaiter(this, void 0, void 0, function* () {
        const includeShared = options.includeshared;
        const id = options.eventtype;
        const eventType = yield sdk.GetEventManagementClient().GetEventType(id, { includeShared: includeShared });
        yield sdk
            .GetEventManagementClient()
            .DeleteEventType(id, { ifMatch: eventType.etag, includeShared: includeShared });
        console.log(`eventtype with id ${color(id)} deleted.`);
    });
}
function listEventTypes(sdk, options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const includeShared = options.includeshared;
        const eventMgmt = sdk.GetEventManagementClient();
        let page = 0;
        let eventtypes;
        const filter = buildFilter(options, sdk.GetTenant());
        (0, command_utils_1.verboseLog)(JSON.stringify(filter, null, 2), options.verbose);
        !options.idonly && console.log(`id etag aspects name owner scope sharing`);
        let eventCount = 0;
        do {
            eventtypes = (yield (0, __1.retry)(options.retry, () => eventMgmt.GetEventTypes({
                page: page,
                size: 100,
                filter: Object.keys(filter).length === 0 ? undefined : JSON.stringify(filter),
                sort: "id,asc",
                includeShared: includeShared,
            })));
            eventtypes._embedded = eventtypes._embedded || { eventTypes: [] };
            eventtypes.page = eventtypes.page || { totalPages: 0 };
            for (const eventtype of eventtypes._embedded.eventTypes || []) {
                eventCount++;
                !options.idonly &&
                    console.log(`${eventtype.id}\t${eventtype.etag} fields[${(_a = eventtype.fields) === null || _a === void 0 ? void 0 : _a.length}]\t${color(eventtype.name)} ${eventtype.owner} ${eventtype.scope} ${((_b = eventtype.sharing) === null || _b === void 0 ? void 0 : _b.modes) || ""}`);
                options.idonly && console.log(`${eventtype.id}`);
                (0, command_utils_1.verboseLog)(JSON.stringify(eventtype, null, 2), options.verbose);
            }
        } while (page++ < (eventtypes.page.totalPages || 0));
        console.log(`${color(eventCount)} event types listed.\n`);
    });
}
function buildFilter(options, tenant) {
    const filter = (options.filter && JSON.parse(options.filter)) || {};
    let pointer = filter;
    if (options.eventtype !== undefined) {
        filter.and = {};
        pointer = filter.and;
    }
    if (options.eventtype) {
        pointer.id = { contains: `${options.eventtype}` };
    }
    if (!options.includeglobal) {
        pointer.owner = { eq: `${tenant}` };
    }
    return filter;
}
function eventTypeInfo(options, sdk) {
    return __awaiter(this, void 0, void 0, function* () {
        const includeShared = options.includeshared;
        const id = options.eventtype;
        const eventType = yield sdk.GetEventManagementClient().GetEventType(id, { includeShared: includeShared });
        console.log(JSON.stringify(eventType, null, 2));
    });
}
function checkRequiredParamaters(options) {
    options.mode === "template" &&
        !options.eventtype &&
        (0, command_utils_1.errorLog)("you have to provide event type to create a template (see mc event-types --help for more details)", true);
    options.mode === "create" &&
        !options.file &&
        (0, command_utils_1.errorLog)("you have to provide a file with event type to create an event type (see mc event-types --help for more details)", true);
    options.mode === "delete" &&
        !options.eventtype &&
        (0, command_utils_1.errorLog)("you have to provide the event type to delete (see mc event-types --help for more details)", true);
    options.mode === "info" &&
        !options.eventtype &&
        (0, command_utils_1.errorLog)("you have to provide the event type  (see mc event-types --help for more details)", true);
}
//# sourceMappingURL=event-types.js.map