"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const utils_1 = require("../../api/utils");
const command_utils_1 = require("./command-utils");
const fs = require("fs");
const path = require("path");
let color = (0, command_utils_1.getColor)("magenta");
exports.default = (program) => {
    program
        .command("sdi-data-queries")
        .alias("sdq")
        .option("-m, --mode [list|create|update|template|info|delete|latest]", "list | create | update | template | info | delete | latest", "list")
        .option("-d, --query <query>", "data query file with definition for --mode create or update command")
        .option("-i, --queryid <queryid>", "the query id for --mode info, update or delete command")
        .option("-o, --overwrite", "overwrite template file if it already exists")
        .option("-r, --result <result>", "result file for --mode latest", "sdi.query.latest.mdsp.json")
        .option("-k, --passkey <passkey>", "passkey")
        .option("-y, --retry <number>", "retry attempts before giving up", "3")
        .option("-v, --verbose", "verbose output")
        .description(color("manage data queries for SDI *"))
        .action((options) => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            try {
                checkRequiredParamaters(options);
                const sdk = (0, command_utils_1.getSdk)(options);
                color = (0, command_utils_1.adjustColor)(color, options);
                (0, command_utils_1.homeDirLog)(options.verbose, color);
                (0, command_utils_1.proxyLog)(options.verbose, color);
                switch (options.mode) {
                    case "list":
                        yield listDataQueries(sdk, options);
                        break;
                    case "info":
                        yield queryInfo(sdk, options);
                        break;
                    case "template":
                        createTemplate(options);
                        console.log("Edit the file before submitting it to MindSphere.");
                        break;
                    case "update":
                        yield updateQuery(options, sdk);
                        break;
                    case "create":
                        yield createQuery(options, sdk);
                        break;
                    case "delete":
                        yield deleteQuery(options, sdk);
                        break;
                    case "latest":
                        yield queryResults(options, sdk);
                        break;
                    default:
                        throw Error(`no such option: ${options.mode}`);
                }
            }
            catch (err) {
                (0, command_utils_1.errorLog)(err, options.verbose);
            }
        }))();
    })
        .on("--help", () => {
        (0, console_1.log)("\n  Examples:\n");
        (0, console_1.log)(`    mc sdi-data-queries --mode list \t\t list all sdi dataqueries`);
        (0, console_1.log)(`    mc sdi-data-queries --mode template \t create template file`);
        (0, console_1.log)(`    mc sdi-data-queries --mode create --query <queryfile> \t create sdi data query`);
        (0, console_1.log)(`    mc sdi-data-queries --mode update --query <queryfile> --queryid <queryid> \
                                                                                             \t\t update sdi data query`);
        (0, console_1.log)(`    mc sdi-data-queries --mode info --queryid <queryid>   \t\t get sdi data query info`);
        (0, console_1.log)(`    mc sdi-data-queries --mode latest --queryid <queryid>   \t\t get latest query results`);
        (0, console_1.log)(`    mc sdi-data-queries --mode delete --queryid <queryid> \t\t delete sdi data query`);
        (0, command_utils_1.serviceCredentialLog)();
    });
};
function checkRequiredParamaters(options) {
    options.mode === "create" &&
        !options.query &&
        (0, command_utils_1.errorLog)("you have to provide a query template file to create a sdi query (see mc sdi-data-queries --help for more details)", true);
    options.mode === "update" &&
        !options.queryid &&
        (0, command_utils_1.errorLog)("you have to provide the queryid of the query you want to update (see mc sdi-data-queries --help for more details)", true);
    options.mode === "info" &&
        !options.queryid &&
        (0, command_utils_1.errorLog)("you have to provide the queryid to get infos about the sdi data query (see mc sdi-data-queries --help for more details)", true);
    options.mode === "delete" &&
        !options.queryid &&
        (0, command_utils_1.errorLog)("you have to provide the queryid to delete the sdi data query (see mc sdi-data-queries --help for more details)", true);
}
function listDataQueries(sdk, options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const sdiClient = sdk.GetSemanticDataInterConnectClient();
        let pageToken = undefined;
        let count = 0;
        console.log(`${color("id")}  ${"name"}  ${"description"} `);
        do {
            const queries = yield sdiClient.GetQueries({
                pageToken: pageToken,
            });
            (_a = queries.queries) === null || _a === void 0 ? void 0 : _a.forEach((query) => {
                console.log(`${color(query.id)}  ${query.name}  ${query.description} `);
                (0, command_utils_1.verboseLog)(JSON.stringify(query, null, 2), options.verbose);
                count++;
            });
            pageToken = (_b = queries.page) === null || _b === void 0 ? void 0 : _b.nextToken;
        } while (pageToken);
        console.log(`${color(count)} sdi data queries listed.`);
    });
}
function queryInfo(sdk, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const sdiClient = sdk.GetSemanticDataInterConnectClient();
        const query = yield sdiClient.GetQuery(`${options.queryid}`);
        printQueryInfos(query, options);
    });
}
function printQueryInfos(query, options) {
    (0, command_utils_1.printObjectInfo)("Data Query:", query, options, ["id", "sqlStatement"], color);
}
function createTemplate(options) {
    const templateType = {
        description: "<enter description>",
        isBusinessQuery: true,
        ontologyId: "<enter ontology id>",
        isDynamic: true,
        name: "<enter name>",
        sqlStatement: "base 64 encoded spark sql query statement: example U0VMRUNUIHZlaGljbGUudmluLCBtYWtlLmRlZiBGUk9NIHZlaGljbGUsIG1ha2UgV0hFUkUgdmVoaWNsZS5tYWtlID0gbWFrZS5pZA==",
    };
    (0, command_utils_1.verboseLog)(JSON.stringify(templateType, null, 2), options.verbose);
    writeToFile(options, templateType);
}
function writeToFile(options, query) {
    const fileName = options.file || `sdi.query.mdsp.json`;
    const filePath = path.resolve(fileName);
    fs.existsSync(filePath) &&
        !options.overwrite &&
        (0, utils_1.throwError)(`The ${filePath} already exists. (use --overwrite to overwrite) `);
    fs.writeFileSync(filePath, JSON.stringify(query, null, 2));
    console.log(`The data was written into ${color(fileName)} run \n\n\tmc sdi-data-queries --mode create --query ${fileName} \n\nto create the sdi data query`);
}
function createQuery(options, sdk) {
    return __awaiter(this, void 0, void 0, function* () {
        const filePath = path.resolve(options.query);
        const file = fs.readFileSync(filePath);
        const query = JSON.parse(file.toString());
        const result = yield sdk.GetSemanticDataInterConnectClient().PostQuery(query);
        printQueryInfos(result, options);
    });
}
function updateQuery(options, sdk) {
    return __awaiter(this, void 0, void 0, function* () {
        const filePath = path.resolve(options.query);
        const file = fs.readFileSync(filePath);
        const query = JSON.parse(file.toString());
        const result = yield sdk.GetSemanticDataInterConnectClient().PatchQuery(`${options.queryid}`, query);
        printQueryInfos(result, options);
    });
}
function deleteQuery(options, sdk) {
    return __awaiter(this, void 0, void 0, function* () {
        const sdiClient = sdk.GetSemanticDataInterConnectClient();
        yield sdiClient.DeleteQuery(`${options.queryid}`);
        console.log(`The sdi data query with id : ${color(options.queryid)} was deleted.`);
    });
}
function queryResults(options, sdk) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileName = options.results || `sdi.query.latest.mdsp.json`;
        const filePath = path.resolve(fileName);
        fs.existsSync(filePath) &&
            !options.overwrite &&
            (0, utils_1.throwError)(`The ${filePath} already exists. (use --overwrite to overwrite) `);
        const sdiClient = sdk.GetSemanticDataInterConnectClient();
        const result = yield sdiClient.GetQueryExecutionJobLatestResults(`${options.queryid}`);
        (0, command_utils_1.verboseLog)(JSON.stringify(result, null, 2), options.verbose);
        fs.writeFileSync(filePath, JSON.stringify(result, null, 2));
        console.log(`The result data was written into ${color(fileName)}.`);
    });
}
//# sourceMappingURL=sdi-data-queries.js.map