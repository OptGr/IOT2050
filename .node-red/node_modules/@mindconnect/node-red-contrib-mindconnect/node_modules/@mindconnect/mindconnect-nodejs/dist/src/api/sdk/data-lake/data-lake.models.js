"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLakeModels = void 0;
var DataLakeModels;
(function (DataLakeModels) {
    /**
     *
     * @export
     * @class RequiredError
     * @extends {Error}
     */
    class RequiredError extends Error {
        constructor(field, msg) {
            super(msg);
            this.field = field;
            this.name = "RequiredError";
        }
    }
    DataLakeModels.RequiredError = RequiredError;
    /**
     * Access permission requested to be set for the path. Currently READ is allowed for all tenants and subtenants at root level. User can manage WRITE permissions for the paths
     * @export
     * @enum {string}
     */
    let AccessPermission;
    (function (AccessPermission) {
        AccessPermission[AccessPermission["WRITE"] = "WRITE"] = "WRITE";
    })(AccessPermission = DataLakeModels.AccessPermission || (DataLakeModels.AccessPermission = {}));
    /**
     * Access permission requested for the token. The permission could be READ or WRITE. Access Token with WRITE permission can be requested only on the paths for which WRITE access has been enabled. Default value will READ.
     * @export
     * @enum {string}
     */
    let AccessTokenPermission;
    (function (AccessTokenPermission) {
        AccessTokenPermission[AccessTokenPermission["READ"] = "READ"] = "READ";
        AccessTokenPermission[AccessTokenPermission["WRITE"] = "WRITE"] = "WRITE";
    })(AccessTokenPermission = DataLakeModels.AccessTokenPermission || (DataLakeModels.AccessTokenPermission = {}));
    /**
     * @export
     * @namespace CrossAccountAccess
     */
    let CrossAccountAccess;
    (function (CrossAccountAccess) {
        /**
         * @export
         * @enum {string}
         */
        let StatusEnum;
        (function (StatusEnum) {
            StatusEnum[StatusEnum["ENABLED"] = "ENABLED"] = "ENABLED";
            StatusEnum[StatusEnum["DISABLED"] = "DISABLED"] = "DISABLED";
        })(StatusEnum = CrossAccountAccess.StatusEnum || (CrossAccountAccess.StatusEnum = {}));
    })(CrossAccountAccess = DataLakeModels.CrossAccountAccess || (DataLakeModels.CrossAccountAccess = {}));
    /**
     * @export
     * @namespace CrossAccountAccessRequest
     */
    let CrossAccountAccessRequest;
    (function (CrossAccountAccessRequest) {
        /**
         * @export
         * @enum {string}
         */
        let StatusEnum;
        (function (StatusEnum) {
            StatusEnum[StatusEnum["ENABLED"] = "ENABLED"] = "ENABLED";
            StatusEnum[StatusEnum["DISABLED"] = "DISABLED"] = "DISABLED";
        })(StatusEnum = CrossAccountAccessRequest.StatusEnum || (CrossAccountAccessRequest.StatusEnum = {}));
    })(CrossAccountAccessRequest = DataLakeModels.CrossAccountAccessRequest || (DataLakeModels.CrossAccountAccessRequest = {}));
    /**
     * @export
     * @namespace DeleteObjectsJobErrorDetailsResponseObjects
     */
    let DeleteObjectsJobErrorDetailsResponseObjects;
    (function (DeleteObjectsJobErrorDetailsResponseObjects) {
        /**
         * @export
         * @enum {string}
         */
        let StatusEnum;
        (function (StatusEnum) {
            StatusEnum[StatusEnum["DELETED"] = "DELETED"] = "DELETED";
            StatusEnum[StatusEnum["FAILED"] = "FAILED"] = "FAILED";
            StatusEnum[StatusEnum["NOTFOUND"] = "NOTFOUND"] = "NOTFOUND";
        })(StatusEnum = DeleteObjectsJobErrorDetailsResponseObjects.StatusEnum || (DeleteObjectsJobErrorDetailsResponseObjects.StatusEnum = {}));
    })(DeleteObjectsJobErrorDetailsResponseObjects = DataLakeModels.DeleteObjectsJobErrorDetailsResponseObjects || (DataLakeModels.DeleteObjectsJobErrorDetailsResponseObjects = {}));
    /**
     * Status of the file to be deleted
     * @export
     * @enum {string}
     */
    let DeleteObjectsJobStatus;
    (function (DeleteObjectsJobStatus) {
        DeleteObjectsJobStatus[DeleteObjectsJobStatus["COMPLETED"] = "COMPLETED"] = "COMPLETED";
        DeleteObjectsJobStatus[DeleteObjectsJobStatus["INPROGRESS"] = "IN_PROGRESS"] = "INPROGRESS";
        DeleteObjectsJobStatus[DeleteObjectsJobStatus["COMPLETEDWITHERRORS"] = "COMPLETED_WITH_ERRORS"] = "COMPLETEDWITHERRORS";
    })(DeleteObjectsJobStatus = DataLakeModels.DeleteObjectsJobStatus || (DataLakeModels.DeleteObjectsJobStatus = {}));
    /**
     * @export
     * @namespace ImportJobResponse
     */
    let ImportJobResponse;
    (function (ImportJobResponse) {
        /**
         * @export
         * @enum {string}
         */
        let StatusEnum;
        (function (StatusEnum) {
            StatusEnum[StatusEnum["PENDING"] = "PENDING"] = "PENDING";
            StatusEnum[StatusEnum["QUEUED"] = "QUEUED"] = "QUEUED";
            StatusEnum[StatusEnum["INPROGRESS"] = "IN_PROGRESS"] = "INPROGRESS";
            StatusEnum[StatusEnum["SUCCESS"] = "SUCCESS"] = "SUCCESS";
            StatusEnum[StatusEnum["FAILED"] = "FAILED"] = "FAILED";
        })(StatusEnum = ImportJobResponse.StatusEnum || (ImportJobResponse.StatusEnum = {}));
    })(ImportJobResponse = DataLakeModels.ImportJobResponse || (DataLakeModels.ImportJobResponse = {}));
    /**
     * specific access
     * @export
     * @enum {string}
     */
    let Permission;
    (function (Permission) {
        Permission[Permission["READ"] = "READ"] = "READ";
        Permission[Permission["DELETE"] = "DELETE"] = "DELETE";
    })(Permission = DataLakeModels.Permission || (DataLakeModels.Permission = {}));
    /**
     * @export
     * @namespace SortCriteria
     */
    let SortCriteria;
    (function (SortCriteria) {
        /**
         * @export
         * @enum {string}
         */
        let FieldEnum;
        (function (FieldEnum) {
            FieldEnum[FieldEnum["Name"] = "name"] = "Name";
            FieldEnum[FieldEnum["Location"] = "location"] = "Location";
            FieldEnum[FieldEnum["LastModified"] = "lastModified"] = "LastModified";
            FieldEnum[FieldEnum["Size"] = "size"] = "Size";
        })(FieldEnum = SortCriteria.FieldEnum || (SortCriteria.FieldEnum = {}));
        /**
         * @export
         * @enum {string}
         */
        let OrderEnum;
        (function (OrderEnum) {
            OrderEnum[OrderEnum["DESC"] = "DESC"] = "DESC";
            OrderEnum[OrderEnum["ASC"] = "ASC"] = "ASC";
        })(OrderEnum = SortCriteria.OrderEnum || (SortCriteria.OrderEnum = {}));
    })(SortCriteria = DataLakeModels.SortCriteria || (DataLakeModels.SortCriteria = {}));
})(DataLakeModels = exports.DataLakeModels || (exports.DataLakeModels = {}));
//# sourceMappingURL=data-lake.models.js.map