export declare namespace EventManagementModels {
    class RequiredError extends Error {
        field: string;
        name: "RequiredError";
        constructor(field: string, msg?: string);
    }
    /**
     *
     * @export
     * @interface BaseEvent
     */
    interface BaseEvent {
        /**
         * Unique identifier of the event type (filterable, not updatable)
         * @type {string}
         * @memberof BaseEvent
         */
        typeId?: string;
        /**
         * Correlation ID of the event. It can be used to group related events (filterable, not updatable)
         * @type {string}
         * @memberof BaseEvent
         */
        correlationId?: string;
        /**
         * Timestamp attached to the event in UTC format (filterable, not updatable)
         * @type {string}
         * @memberof BaseEvent
         */
        timestamp: string;
        /**
         * Entity attached to the event (filterable, not updatable)
         * @type {string}
         * @memberof BaseEvent
         */
        entityId: string;
    }
    /**
     *
     * @export
     * @interface BaseEventResponse
     */
    interface BaseEventResponse {
        /**
         * Unique identifier of the event
         * @type {string}
         * @memberof BaseEventResponse
         */
        id: string;
        /**
         * Unique identifier of the event type (filterable, not updatable)
         * @type {string}
         * @memberof BaseEventResponse
         */
        typeId: string;
        /**
         * Correlation ID of the event. It can be used to group related events (filterable, not updatable)
         * @type {string}
         * @memberof BaseEventResponse
         */
        correlationId: string;
        /**
         * Timestamp attached to the event in UTC format (filterable, not updatable)
         * @type {string}
         * @memberof BaseEventResponse
         */
        timestamp: string;
        /**
         * Entity attached to the event (filterable, not updatable)
         * @type {string}
         * @memberof BaseEventResponse
         */
        entityId: string;
        /**
         * Incremental counter for optimistic concurrency control
         * @type {number}
         * @memberof BaseEventResponse
         */
        etag: number;
        /**
         *
         * @type {SharingResource}
         * @memberof BaseEventResponse
         */
        sharing?: SharingResource;
        /**
         *
         * @type {BaseEventResponseLinks}
         * @memberof BaseEventResponse
         */
        _links: BaseEventResponseLinks;
    }
    /**
     *
     * @export
     * @interface BaseEventResponseLinks
     */
    interface BaseEventResponseLinks {
        /**
         *
         * @type {RelSelf}
         * @memberof BaseEventResponseLinks
         */
        self?: RelSelf;
    }
    /**
     * Details about an event within a bulk create job
     * @export
     * @interface CreateEventDetailedDescription
     */
    interface CreateEventDetailedDescription {
        /**
         * created event resource or the input event in case of failure
         * @type {string}
         * @memberof CreateEventDetailedDescription
         */
        event?: string;
        /**
         * status code of event creation
         * @type {string}
         * @memberof CreateEventDetailedDescription
         */
        resultCode?: string;
        /**
         * details about failing event creation
         * @type {string}
         * @memberof CreateEventDetailedDescription
         */
        errorMessage?: string;
    }
    /**
     *
     * @export
     * @interface CreateEventsJob
     */
    interface CreateEventsJob {
        /**
         * - List of events to create
         * @type {Array<CustomEvent>}
         * @memberof CreateEventsJob
         */
        events: Array<CustomEvent>;
    }
    /**
     * Details about the job in case of FINISHED and FINISHED_WITH_ERROR
     * @export
     * @interface CreateJobDetails
     */
    interface CreateJobDetails {
        /**
         *
         * @type {Array<CreateEventDetailedDescription>}
         * @memberof CreateJobDetails
         */
        resultDescription?: Array<CreateEventDetailedDescription>;
    }
    /**
     *
     * @export
     * @interface CreateJobResource
     */
    interface CreateJobResource extends JobResource {
        /**
         *
         * @type {CreateJobDetails}
         * @memberof CreateJobResource
         */
        details?: CreateJobDetails;
    }
    /**
     * @export
     * @namespace CreateJobResource
     */
    namespace CreateJobResource { }
    /**
     *
     * @export
     * @interface CustomEvent
     */
    interface CustomEvent extends BaseEvent {
    }
    /**
     *
     * @export
     * @interface CustomEventCreated
     */
    interface CustomEventCreated extends BaseEventResponse {
    }
    /**
     *
     * @export
     * @interface CustomEventResponse
     */
    interface CustomEventResponse extends BaseEventResponse {
    }
    /**
     *
     * @export
     * @interface CustomEventUpdated
     */
    interface CustomEventUpdated extends BaseEventResponse {
    }
    /**
     *
     * @export
     * @interface DeleteEventsJob
     */
    interface DeleteEventsJob {
        /**
         * - The `timestamp` property can be filtered by `before`, `after` and `between` functions. - At least `typeId` property must be provided in filter expression. - Multiple `typeId` expressions (by using and, or logical operators) in filter parameter is not allowed. Only equality function is supported on it. - Negation of `typeId` in filter expression is not allowed.
         * @type {any}
         * @memberof DeleteEventsJob
         */
        filter: any;
    }
    /**
     * Details about the job in case of FINISHED and FINISHED_WITH_ERROR
     * @export
     * @interface DeleteJobDetails
     */
    interface DeleteJobDetails {
        /**
         * status code describes the job's execution result
         * @type {string}
         * @memberof DeleteJobDetails
         */
        resultCode?: string;
        /**
         * information about - how many events deleted or - what error happened
         * @type {string}
         * @memberof DeleteJobDetails
         */
        resultDescription?: string;
    }
    /**
     *
     * @export
     * @interface DeleteJobResource
     */
    interface DeleteJobResource extends JobResource {
        /**
         *
         * @type {DeleteJobDetails}
         * @memberof DeleteJobResource
         */
        details?: DeleteJobDetails;
    }
    /**
     * @export
     * @namespace DeleteJobResource
     */
    namespace DeleteJobResource { }
    /**
     *
     * @export
     * @interface Errors
     */
    interface Errors extends Array<ErrorsInner> {
    }
    /**
     *
     * @export
     * @interface ErrorsInner
     */
    interface ErrorsInner {
        /**
         *
         * @type {string}
         * @memberof ErrorsInner
         */
        logref?: string;
        /**
         *
         * @type {string}
         * @memberof ErrorsInner
         */
        message?: string;
    }
    /**
     *
     * @export
     * @interface EventType
     */
    interface EventType {
        /**
         * ID of the created event type
         * @type {string}
         * @memberof EventType
         */
        id?: string;
        /**
         * Name of the event type
         * @type {string}
         * @memberof EventType
         */
        name: string;
        /**
         * Parent event type ID
         * @type {string}
         * @memberof EventType
         */
        parentId?: string;
        /**
         * Time to live in days
         * @type {number}
         * @memberof EventType
         */
        ttl?: number;
        /**
         * Scope of the event type
         * @type {string}
         * @memberof EventType
         */
        scope?: EventType.ScopeEnum;
        /**
         *
         * @type {Array<Field>}
         * @memberof EventType
         */
        fields: Array<Field>;
    }
    /**
     * @export
     * @namespace EventType
     */
    namespace EventType {
        /**
         * @export
         * @enum {string}
         */
        enum ScopeEnum {
            LOCAL = "LOCAL",
            GLOBAL = "GLOBAL"
        }
    }
    /**
     *
     * @export
     * @interface EventTypePatch
     */
    interface EventTypePatch {
        /**
         * Type of the operation to be made
         * @type {string}
         * @memberof EventTypePatch
         */
        op: EventTypePatch.OpEnum;
        /**
         * Identifying a specific attribute/field whereon the operation should be made
         * @type {string}
         * @memberof EventTypePatch
         */
        path: string;
        /**
         * New value for the given attribute or the field, that should be added, depending on the *op* value
         * @type {string}
         * @memberof EventTypePatch
         */
        value: string;
    }
    /**
     * @export
     * @namespace EventTypePatch
     */
    namespace EventTypePatch {
        /**
         * @export
         * @enum {string}
         */
        enum OpEnum {
            Add = "add",
            Replace = "replace"
        }
    }
    /**
     *
     * @export
     * @interface EventTypeResponse
     */
    interface EventTypeResponse {
        /**
         * ID of the created event type
         * @type {string}
         * @memberof EventTypeResponse
         */
        id: string;
        /**
         * Name of the event type
         * @type {string}
         * @memberof EventTypeResponse
         */
        name: string;
        /**
         * Parent event type ID
         * @type {string}
         * @memberof EventTypeResponse
         */
        parentId: string;
        /**
         * Time to live in days
         * @type {number}
         * @memberof EventTypeResponse
         */
        ttl: number;
        /**
         *
         * @type {number}
         * @memberof EventTypeResponse
         */
        etag: number;
        /**
         * The owner who created the event type
         * @type {string}
         * @memberof EventTypeResponse
         */
        owner: string;
        /**
         * Scope of the event type
         * @type {string}
         * @memberof EventTypeResponse
         */
        scope: EventTypeResponse.ScopeEnum;
        /**
         *
         * @type {Array<Field>}
         * @memberof EventTypeResponse
         */
        fields: Array<Field>;
        /**
         *
         * @type {SharingResource}
         * @memberof EventTypeResponse
         */
        sharing?: SharingResource;
        /**
         *
         * @type {EventTypeResponseLinks}
         * @memberof EventTypeResponse
         */
        _links: EventTypeResponseLinks;
    }
    /**
     * @export
     * @namespace EventTypeResponse
     */
    namespace EventTypeResponse {
        /**
         * @export
         * @enum {string}
         */
        enum ScopeEnum {
            LOCAL = "LOCAL",
            GLOBAL = "GLOBAL"
        }
    }
    /**
     *
     * @export
     * @interface EventTypeResponseLinks
     */
    interface EventTypeResponseLinks {
        /**
         *
         * @type {RelSelf}
         * @memberof EventTypeResponseLinks
         */
        self?: RelSelf;
        /**
         *
         * @type {RelEvents}
         * @memberof EventTypeResponseLinks
         */
        events?: RelEvents;
    }
    /**
     *
     * @export
     * @interface Field
     */
    interface Field {
        /**
         *
         * @type {string}
         * @memberof Field
         */
        name: string;
        /**
         *
         * @type {boolean}
         * @memberof Field
         */
        filterable?: boolean;
        /**
         *
         * @type {boolean}
         * @memberof Field
         */
        required?: boolean;
        /**
         *
         * @type {boolean}
         * @memberof Field
         */
        updatable?: boolean;
        /**
         * Note that the LINK type is not a plain HREF. The value for the LINK type should be given between quotation marks.
         * @type {string}
         * @memberof Field
         */
        type: Field.TypeEnum;
        /**
         * This field is applicable only if the field's type is ENUM, otherwise it should be skipped. The values must be strings.
         * @type {Array<string>}
         * @memberof Field
         */
        values?: Array<string>;
    }
    /**
     * @export
     * @namespace Field
     */
    namespace Field {
        /**
         * @export
         * @enum {string}
         */
        enum TypeEnum {
            STRING = "STRING",
            INTEGER = "INTEGER",
            DOUBLE = "DOUBLE",
            BOOLEAN = "BOOLEAN",
            LINK = "LINK",
            TIMESTAMP = "TIMESTAMP",
            UUID = "UUID",
            ENUM = "ENUM"
        }
    }
    /**
     *
     * @export
     * @interface InfoResponse
     */
    interface InfoResponse {
        /**
         *
         * @type {InfoResponseSelf}
         * @memberof InfoResponse
         */
        self?: InfoResponseSelf;
        /**
         *
         * @type {InfoResponseEvents}
         * @memberof InfoResponse
         */
        events?: InfoResponseEvents;
        /**
         *
         * @type {InfoResponseEventTypes}
         * @memberof InfoResponse
         */
        eventTypes?: InfoResponseEventTypes;
        /**
         *
         * @type {InfoResponseDeleteEventsJobs}
         * @memberof InfoResponse
         */
        deleteEventsJobs?: InfoResponseDeleteEventsJobs;
        /**
         *
         * @type {InfoResponseCreateEventsJobs}
         * @memberof InfoResponse
         */
        createEventsJobs?: InfoResponseCreateEventsJobs;
    }
    /**
     *
     * @export
     * @interface InfoResponseCreateEventsJobs
     */
    interface InfoResponseCreateEventsJobs {
        /**
         *
         * @type {string}
         * @memberof InfoResponseCreateEventsJobs
         */
        href?: string;
        /**
         *
         * @type {boolean}
         * @memberof InfoResponseCreateEventsJobs
         */
        templated?: boolean;
    }
    /**
     *
     * @export
     * @interface InfoResponseDeleteEventsJobs
     */
    interface InfoResponseDeleteEventsJobs {
        /**
         *
         * @type {string}
         * @memberof InfoResponseDeleteEventsJobs
         */
        href?: string;
        /**
         *
         * @type {boolean}
         * @memberof InfoResponseDeleteEventsJobs
         */
        templated?: boolean;
    }
    /**
     *
     * @export
     * @interface InfoResponseEventTypes
     */
    interface InfoResponseEventTypes {
        /**
         *
         * @type {string}
         * @memberof InfoResponseEventTypes
         */
        href?: string;
        /**
         *
         * @type {boolean}
         * @memberof InfoResponseEventTypes
         */
        templated?: boolean;
    }
    /**
     *
     * @export
     * @interface InfoResponseEvents
     */
    interface InfoResponseEvents {
        /**
         *
         * @type {string}
         * @memberof InfoResponseEvents
         */
        href?: string;
        /**
         *
         * @type {boolean}
         * @memberof InfoResponseEvents
         */
        templated?: boolean;
    }
    /**
     *
     * @export
     * @interface InfoResponseSelf
     */
    interface InfoResponseSelf {
        /**
         *
         * @type {string}
         * @memberof InfoResponseSelf
         */
        href?: string;
    }
    /**
     *
     * @export
     * @interface JobResource
     */
    interface JobResource {
        /**
         * Unique identifier of the job
         * @type {string}
         * @memberof JobResource
         */
        id?: string;
        /**
         * State of the job
         * @type {string}
         * @memberof JobResource
         */
        state?: JobResource.StateEnum;
    }
    /**
     * @export
     * @namespace JobResource
     */
    namespace JobResource {
        /**
         * @export
         * @enum {string}
         */
        enum StateEnum {
            ACCEPTED = "ACCEPTED",
            INPROGRESS = "IN_PROGRESS",
            FINISHED = "FINISHED",
            FINISHEDWITHERROR = "FINISHED_WITH_ERROR"
        }
    }
    /**
     *
     * @export
     * @interface MindsphereStandardEvent
     */
    interface MindsphereStandardEvent extends BaseEvent {
        /**
         *
         * @type {number}
         * @memberof MindsphereStandardEvent
         */
        severity?: number;
        /**
         *
         * @type {string}
         * @memberof MindsphereStandardEvent
         */
        description?: string;
        /**
         *
         * @type {string}
         * @memberof MindsphereStandardEvent
         */
        code?: string;
        /**
         *
         * @type {string}
         * @memberof MindsphereStandardEvent
         */
        source?: string;
        /**
         *
         * @type {boolean}
         * @memberof MindsphereStandardEvent
         */
        acknowledged?: boolean;
    }
    /**
     *
     * @export
     * @interface MindsphereStandardEventResponse
     */
    interface MindsphereStandardEventResponse extends BaseEventResponse {
        /**
         *
         * @type {number}
         * @memberof MindsphereStandardEventResponse
         */
        severity?: number;
        /**
         *
         * @type {string}
         * @memberof MindsphereStandardEventResponse
         */
        description?: string;
        /**
         *
         * @type {string}
         * @memberof MindsphereStandardEventResponse
         */
        code?: string;
        /**
         *
         * @type {string}
         * @memberof MindsphereStandardEventResponse
         */
        source?: string;
        /**
         *
         * @type {boolean}
         * @memberof MindsphereStandardEventResponse
         */
        acknowledged?: boolean;
    }
    /**
     *
     * @export
     * @interface Page
     */
    interface Page {
        /**
         *
         * @type {number}
         * @memberof Page
         */
        size?: number;
        /**
         *
         * @type {number}
         * @memberof Page
         */
        totalElements?: number;
        /**
         *
         * @type {number}
         * @memberof Page
         */
        totalPages?: number;
        /**
         *
         * @type {number}
         * @memberof Page
         */
        number?: number;
    }
    /**
     *
     * @export
     * @interface PagingLinks
     */
    interface PagingLinks {
        /**
         *
         * @type {RelFirst}
         * @memberof PagingLinks
         */
        first?: RelFirst;
        /**
         *
         * @type {SelfLink}
         * @memberof PagingLinks
         */
        self?: SelfLink;
        /**
         *
         * @type {RelNext}
         * @memberof PagingLinks
         */
        next?: RelNext;
        /**
         *
         * @type {RelPrev}
         * @memberof PagingLinks
         */
        prev?: RelPrev;
        /**
         *
         * @type {RelLast}
         * @memberof PagingLinks
         */
        last?: RelLast;
    }
    /**
     *
     * @export
     * @interface QueryEventTypesResponse
     */
    interface QueryEventTypesResponse {
        /**
         *
         * @type {QueryEventTypesResponseEmbedded}
         * @memberof QueryEventTypesResponse
         */
        _embedded?: QueryEventTypesResponseEmbedded;
        /**
         *
         * @type {PagingLinks}
         * @memberof QueryEventTypesResponse
         */
        _links?: PagingLinks;
        /**
         *
         * @type {Page}
         * @memberof QueryEventTypesResponse
         */
        page?: Page;
    }
    /**
     *
     * @export
     * @interface QueryEventTypesResponseEmbedded
     */
    interface QueryEventTypesResponseEmbedded {
        /**
         *
         * @type {Array<EventTypeResponse>}
         * @memberof QueryEventTypesResponseEmbedded
         */
        eventTypes?: Array<EventTypeResponse>;
    }
    /**
     *
     * @export
     * @interface QueryEventsResponse
     */
    interface QueryEventsResponse {
        /**
         *
         * @type {QueryEventsResponseEmbedded}
         * @memberof QueryEventsResponse
         */
        _embedded?: QueryEventsResponseEmbedded;
        /**
         *
         * @type {PagingLinks}
         * @memberof QueryEventsResponse
         */
        _links?: PagingLinks;
        /**
         *
         * @type {Page}
         * @memberof QueryEventsResponse
         */
        page?: Page;
    }
    /**
     *
     * @export
     * @interface QueryEventsResponseEmbedded
     */
    interface QueryEventsResponseEmbedded {
        /**
         *
         * @type {Array<MindsphereStandardEventResponse>}
         * @memberof QueryEventsResponseEmbedded
         */
        events?: Array<MindsphereStandardEventResponse>;
    }
    /**
     *
     * @export
     * @interface RelEvents
     */
    interface RelEvents {
        /**
         *
         * @type {string}
         * @memberof RelEvents
         */
        href?: string;
    }
    /**
     *
     * @export
     * @interface RelFirst
     */
    interface RelFirst {
        /**
         *
         * @type {string}
         * @memberof RelFirst
         */
        href?: string;
    }
    /**
     *
     * @export
     * @interface RelLast
     */
    interface RelLast {
        /**
         *
         * @type {string}
         * @memberof RelLast
         */
        href?: string;
    }
    /**
     *
     * @export
     * @interface RelNext
     */
    interface RelNext {
        /**
         *
         * @type {string}
         * @memberof RelNext
         */
        href?: string;
    }
    /**
     *
     * @export
     * @interface RelPrev
     */
    interface RelPrev {
        /**
         *
         * @type {string}
         * @memberof RelPrev
         */
        href?: string;
    }
    /**
     *
     * @export
     * @interface RelSelf
     */
    interface RelSelf {
        /**
         *
         * @type {string}
         * @memberof RelSelf
         */
        href?: string;
    }
    /**
     *
     * @export
     * @interface SelfLink
     */
    interface SelfLink {
        /**
         *
         * @type {string}
         * @memberof SelfLink
         */
        href?: string;
        /**
         *
         * @type {boolean}
         * @memberof SelfLink
         */
        templated?: boolean;
    }
    /**
     * Contains sharing information. This sharing information will be available only if 'includeShared' query parameter is 'true' in request.
     * @export
     * @interface SharingResource
     */
    interface SharingResource {
        /**
         * List of sharing modes applicable for this resource. The currently supported modes are SHARER, RECEIVER and DEFAULT.  SHARER means this resource is shared by my tenant. RECEIVER means this resource is shared with my tenant. DEFAULT means this resource is provide by default. An empty array means this resource is not shared. New modes might be introduced later and clients must expect additional items to be contained in the array.
         * @type {Array<string>}
         * @memberof SharingResource
         */
        modes?: Array<SharingResource.ModesEnum>;
    }
    /**
     * @export
     * @namespace SharingResource
     */
    namespace SharingResource {
        /**
         * @export
         * @enum {string}
         */
        enum ModesEnum {
            SHARER = "SHARER",
            RECEIVER = "RECEIVER",
            DEFAULT = "DEFAULT"
        }
    }
    interface Billboard extends InfoResponse {
    }
    interface EmbeddedEventsTypesList extends QueryEventTypesResponse {
    }
    interface EmbeddedEventsList extends QueryEventsResponse {
    }
}
