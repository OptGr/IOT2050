"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai = require("chai");
const mocha_1 = require("mocha");
const mindconnect_schema_1 = require("../src/mindconnect-schema");
chai.should();
mocha_1.describe("Schema Validators", () => {
    mocha_1.it("should instantiate all validators @ci", () => {
        const eventVal = mindconnect_schema_1.eventSchemaValidator();
        eventVal.should.exist;
        const fiVal = mindconnect_schema_1.fileInfoValidator();
        fiVal.should.exist;
        const tsVal = mindconnect_schema_1.timeSeriesValidator();
        tsVal.should.exist;
        const buVal = mindconnect_schema_1.bulkUploadValidator();
        buVal.should.exist;
        const rcVal = mindconnect_schema_1.remoteConfigurationValidator();
        rcVal.should.exist;
        const actionVal = mindconnect_schema_1.actionSchemaValidator();
        actionVal.should.exist;
    });
    mocha_1.it("should validate events @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const eventVal = mindconnect_schema_1.eventSchemaValidator();
        eventVal.should.exist;
        const event = {
            sourceType: "Agent",
            sourceId: "application",
            source: "MindConnect Agent",
            severity: 80,
            description: "Event sent at " + new Date().toISOString(),
            timestamp: new Date().toISOString(),
        };
        eventVal({ sourceType: "Agent" }).should.be.false;
        eventVal({ event }).should.be.false;
        eventVal(event).should.be.true;
    }));
    mocha_1.it("should validate fileInfos @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const fiVal = mindconnect_schema_1.fileInfoValidator();
        fiVal.should.exist;
        const fileInfo = {
            entityId: "1234567890abcdef1234567890abcdef",
            fileName: "package.json",
            fileType: "application/json",
            description: "testfile",
        };
        fiVal({}).should.be.false;
        fiVal(fileInfo).should.be.true;
        delete fileInfo.entityId;
        fiVal(fileInfo).should.be.true;
        delete fileInfo.fileType;
        fiVal(fileInfo).should.be.true;
        delete fileInfo.fileName;
        fiVal(fileInfo).should.be.false;
        fileInfo.fileName = "blubb";
        delete fileInfo.description;
        fiVal(fileInfo).should.be.false;
    }));
    mocha_1.it("should validate timeseries @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const tsVal = mindconnect_schema_1.timeSeriesValidator();
        tsVal.should.exist;
        const values = [
            {
                dataPointId: "1541718362027",
                qualityCode: "1",
                value: "47",
            },
        ];
        tsVal({}).should.be.false;
        tsVal(values).should.be.true;
        for (let index = 0; index < 10; index++) {
            values.push({ dataPointId: "123", qualityCode: "1", value: "33.5" });
        }
        tsVal(values).should.be.true;
        values.push({ xdataPointId: "123", qualityCode: "1", value: "33.5" }); // * invalid data point
        tsVal(values).should.be.false;
        tsVal([{ xdataPointId: "123", qualityCode: "1", value: "33.5" }]).should.be.false;
    }));
    mocha_1.it("should validate bulk @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const buVal = mindconnect_schema_1.bulkUploadValidator();
        buVal.should.exist;
        const values = [
            {
                dataPointId: "1541718362027",
                qualityCode: "1",
                value: "47",
            },
        ];
        buVal([{ timeSTAMP: new Date().toISOString(), values: values }]).should.be.false;
        buVal([{ timestamp: new Date().toISOString(), values: values }]).should.be.true;
        for (let index = 0; index < 10; index++) {
            values.push({ dataPointId: "123", qualityCode: "1", value: "33.5" });
        }
        buVal([{ timestamp: new Date().toISOString(), values: values }]).should.be.true;
        values.push({ xdataPointId: "123", qualityCode: "1", value: "33.5" }); // * invalid data point
        buVal([{ timestamp: new Date().toISOString(), values: values }]).should.be.true;
        buVal([{ xdataPointId: "123", qualityCode: "1", value: "33.5" }]).should.be.false;
    }));
    mocha_1.it("should validate remoteConfiguration @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const rcVal = mindconnect_schema_1.remoteConfigurationValidator();
        rcVal.should.exist;
        let sharedSecretConfig = {
            content: {
                baseUrl: "https://southgate.eu1.mindsphere.io",
                iat: "xxx",
                clientCredentialProfile: ["SHARED_SECRET"],
                clientId: "xxx",
                tenant: "xxx",
            },
            expiration: "2021-05-02T17:45:03.000Z",
        };
        rcVal({}).should.be.false;
        rcVal([{}]).should.be.false;
        rcVal({ name: "test" }).should.be.false;
        rcVal({ name: 123 }).should.be.false;
        rcVal({ name: "testNode", validate: true }).should.be.false;
        rcVal({ name: "testNode", validate: true, eventvalidate: false }).should.be.false;
        rcVal({ name: "testNode", validate: true, validateevent: false }).should.be.false;
        rcVal({ name: "testNode", validate: true, validateevent: false, agentconfig: "" }).should.be.false;
        rcVal({ name: "testNode", validate: true, validateevent: false, agentconfig: {} }).should.be.false;
        rcVal({
            name: "testNode",
            configtype: "SHARED_SECRET",
            validate: true,
            validateevent: false,
            agentconfig: sharedSecretConfig,
            privatekey: "",
            model: "",
            chunk: false,
            disablekeepalive: false,
            retry: "7",
        }).should.be.false;
        rcVal({
            name: "testNode",
            configtype: "SHARED_SECRET",
            validate: true,
            validateevent: false,
            agentconfig: sharedSecretConfig,
            privatekey: "",
            model: "",
            chunk: false,
            disablekeepalive: false,
            retry: "0xa7",
            asyncduration: "23",
        }).should.be.false;
        rcVal({
            name: "testNode",
            configtype: "SHARED_SECRET",
            validate: true,
            validateevent: false,
            agentconfig: sharedSecretConfig,
            privatekey: "",
            model: "",
            chunk: false,
            disablekeepalive: false,
            retry: "7091",
            asyncduration: "23",
        }).should.be.true;
    }));
    mocha_1.it("should validate node actions @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const actionVal = mindconnect_schema_1.actionSchemaValidator();
        actionVal({}).should.be.false;
        actionVal({ action: "" }).should.be.false;
        actionVal({ action: "await", timestamp: new Date().toISOString() }).should.be.true;
        actionVal({ action: "renew", timestamp: new Date().toISOString() }).should.be.true;
        actionVal({ action: "non-existing-action", timestamp: new Date().toISOString() }).should.be.false;
    }));
    mocha_1.it("should validate assetInfo @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const assetInfo = mindconnect_schema_1.assetInfoValidator();
        assetInfo({}).should.be.false;
        assetInfo({ assetId: "" }).should.be.false;
        assetInfo({ assetId: "123", includeShared: "xx", propertyNames: [] }).should.be.false;
        assetInfo({ assetId: "123", includeShared: true, propertyNames: [] }).should.be.true;
    }));
    mocha_1.it("should validate sdk call @ci", () => __awaiter(void 0, void 0, void 0, function* () {
        const assetInfo = mindconnect_schema_1.sdkFunctionValidator();
        assetInfo({}).should.be.false;
        assetInfo({ assetId: "" }).should.be.false;
        assetInfo({ function: "123" }).should.be.true;
    }));
});
//# sourceMappingURL=mindconnect-schema.spec.js.map