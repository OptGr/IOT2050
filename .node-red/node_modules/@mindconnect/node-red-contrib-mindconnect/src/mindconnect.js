"use strict";
// Copyright Siemens AG, 2017
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require("fs");
const path = require("path");
const http_handlers_1 = require("./http-handlers");
const mindconnect_ops_1 = require("./mindconnect-ops");
const mindconnect_schema_1 = require("./mindconnect-schema");
const mindconnect_utils_1 = require("./mindconnect-utils");
module.exports = function (RED) {
    function nodeRedMindConnectAgent(config) {
        RED.nodes.createNode(this, config);
        let node = this;
        mindconnect_utils_1.copyConfiguration(this, config);
        try {
            const agentConfig = JSON.parse(config.agentconfig);
            if (agentConfig.action === "delete") {
                handleDeleteConfiguration(agentConfig);
                return;
            }
        }
        catch (err) { }
        mindconnect_utils_1.configureAgent(node);
        let promises = [];
        let awaitPromises = false;
        this.on("close", () => {
            clearInterval(node.interval_id);
            clearInterval(node.await_id);
            node.log("cleared keep alive and async duration interval");
            node.status({});
        });
        this.on("input", (msg) => {
            (() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const agent = node.agent;
                    const rcValidator = mindconnect_schema_1.remoteConfigurationValidator();
                    if (rcValidator(msg.payload)) {
                        return yield reconfigureNode(msg);
                    }
                    if (!node.agent) {
                        node.error(`Error creating mindconnect agent occured. Is  ${process.cwd()} directory writable? Have you setup the certificate?`, msg);
                        return;
                    }
                    if (!agent.IsOnBoarded() || (msg._forceOnBoard && msg._forceOnBoard === true)) {
                        node.status({ fill: "grey", shape: "dot", text: `onboarding` });
                        yield mindconnect_utils_1.retryWithNodeLog(node.retry, () => agent.OnBoard(), "OnBoard", node);
                    }
                    if (!node.datalakeonly) {
                        if (!agent.HasDataSourceConfiguration() ||
                            (msg._forceGetConfig && msg._forceGetConfig === true)) {
                            node.status({ fill: "grey", shape: "dot", text: `getting configuration` });
                            node.model = yield mindconnect_utils_1.retryWithNodeLog(node.retry, () => agent.GetDataSourceConfiguration(), "GetConfiguration", node);
                        }
                    }
                    else {
                        !node.supressverbosity &&
                            node.status({ fill: "green", shape: "dot", text: `Data lake communication only` });
                    }
                    let timestamp = msg._time ? msg._time : new Date();
                    if (!(timestamp instanceof Date)) {
                        throw new Error(`The time stamp in msg._time must be a javascript Date() and not ${timestamp.toString()}.`);
                    }
                    if (!msg.payload) {
                        throw new Error("you have to have a payload in your msg.payload to post the data!");
                    }
                    const assetValidator = mindconnect_schema_1.assetInfoValidator();
                    const eventValidator = mindconnect_schema_1.eventSchemaValidator();
                    const fileValidator = mindconnect_schema_1.fileInfoValidator();
                    const bulkValidator = mindconnect_schema_1.bulkUploadValidator();
                    const tsValidator = mindconnect_schema_1.timeSeriesValidator();
                    const actionValidator = mindconnect_schema_1.actionSchemaValidator();
                    const dataLakeValidator = mindconnect_schema_1.dataLakeFileInfoValidator();
                    const sdkValidator = mindconnect_schema_1.sdkFunctionValidator();
                    if (msg._includeMindSphereToken) {
                        msg.headers = Object.assign(Object.assign({}, msg.headers), { Authorization: `Bearer ${yield agent.GetAgentToken()}` });
                        node.status({
                            fill: "green",
                            shape: "dot",
                            text: `propagating authentication token in msg.headers...`,
                        });
                        if (msg._ignorePayload) {
                            node.send(msg);
                            return;
                        }
                    }
                    if (actionValidator(msg.payload)) {
                        if (msg.payload.action === "await") {
                            awaitPromises = true;
                        }
                        else if (msg.payload.action === "renew") {
                            promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.renewToken({ msg, agent, timestamp, node })));
                        }
                    }
                    else if (assetValidator(msg.payload)) {
                        promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.getAssetInfo({ msg, agent, timestamp, node })));
                    }
                    else if (sdkValidator(msg.payload)) {
                        promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.applySdkOperation({ msg, agent, timestamp, node })));
                    }
                    else if (eventValidator(msg.payload) || msg._customEvent === true) {
                        promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.sendEvent({ msg, agent, timestamp, node })));
                    }
                    else if (fileValidator(msg.payload)) {
                        promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.sendFile({ msg, agent, timestamp, node })));
                    }
                    else if (dataLakeValidator(msg.payload)) {
                        promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.sendFileToDataLake({ msg, agent, timestamp, node })));
                    }
                    else if (bulkValidator(msg.payload)) {
                        promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.sendBulkTimeSeriesData({ msg, agent, timestamp, node })));
                    }
                    else if (tsValidator(msg.payload)) {
                        promises.push(mindconnect_utils_1.queryablePromise(mindconnect_ops_1.sendTimeSeriesData({ msg, agent, timestamp, node })));
                    }
                    else {
                        let errorObject = mindconnect_utils_1.extractErrorString(eventValidator, fileValidator, bulkValidator, tsValidator, rcValidator, actionValidator, dataLakeValidator, assetValidator, sdkValidator);
                        promises.push(mindconnect_utils_1.queryablePromise(handleInputError(msg, errorObject, timestamp)));
                    }
                    if ((promises.length % node.parallel === 0 && promises.length > 0) || awaitPromises) {
                        const pending = promises.filter((x) => x.isPending()).length;
                        const rejected = promises.filter((x) => x.isRejected()).length;
                        const fullfilled = promises.filter((x) => x.isFulfilled()).length;
                        const errorneous = promises.filter((x) => x.isErrorneous()).length;
                        const info = {
                            requests: promises.length,
                            success: fullfilled - errorneous,
                            pending: pending,
                            errors: rejected + errorneous,
                        };
                        if (node.emitcontrol) {
                            node.send({
                                topic: "control",
                                payload: info,
                            });
                        }
                        node.log(`${info.requests} requests, ${info.success} successful with ${info.errors} errors and ${info.pending} still pending`);
                        node.status({
                            fill: info.errors === 0 ? (info.pending === 0 ? "green" : "blue") : "red",
                            shape: "dot",
                            text: `[${timestamp.toLocaleString()}] ${info.requests} requests, ${info.success} successful with ${info.errors} errors and ${info.pending} still pending`,
                        });
                        promises = promises.filter((x) => x.isPending());
                        awaitPromises = false;
                    }
                }
                catch (error) {
                    mindconnect_utils_1.handleError(node, msg, error);
                    promises = [];
                    awaitPromises = false;
                }
            }))();
            return;
        });
        function handleDeleteConfiguration(agentConfig) {
            const fileName = path.resolve(`.mc/${agentConfig.clientId}.json`);
            try {
                fs.unlinkSync(fileName);
                node.status({ fill: "blue", shape: "dot", text: `deleted configuration file ${fileName}` });
            }
            catch (error) {
                node.error(error);
                node.status({ fill: "red", shape: "dot", text: `error deleting ${fileName}` });
            }
            node.on("input", () => {
                node.error("The node is not correctly configured!");
                node.status({ fill: "red", shape: "dot", text: `The node is not correctly configured!` });
            });
            return;
        }
        function reconfigureNode(msg) {
            return __awaiter(this, void 0, void 0, function* () {
                node.status({ fill: "blue", shape: "dot", text: "received remote configuration..." });
                yield mindconnect_utils_1.sleep(300);
                node.status({
                    fill: "yellow",
                    shape: "dot",
                    text: "the flow will restart in 1 second...",
                });
                yield mindconnect_utils_1.sleep(1000);
                const newConfiguration = msg.payload;
                yield mindconnect_utils_1.reloadFlow(node, RED.settings, newConfiguration);
                return msg;
            });
        }
        function handleInputError(msg, error, timestamp) {
            return __awaiter(this, void 0, void 0, function* () {
                mindconnect_utils_1.handleError(node, msg, error);
                return msg;
            });
        }
    }
    http_handlers_1.RegisterHttpHandlers(RED, nodeRedMindConnectAgent);
};
//# sourceMappingURL=mindconnect.js.map