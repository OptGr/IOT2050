"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterHttpHandlers = void 0;
const path = require("path");
/**
 * Register the http handlers for the node configuration.
 *
 * @export
 * @param {*} RED
 * @param {(config: any) => void} nodeRedMindConnectAgent
 */
function RegisterHttpHandlers(RED, nodeRedMindConnectAgent) {
    RED.nodes.registerType("mindconnect", nodeRedMindConnectAgent);
    RED.httpAdmin.get("/mindconnect/mindsphere.css", function (req, res) {
        const filename = path.join(__dirname, "mindsphere.css");
        res.sendFile(filename);
    });
    RED.httpAdmin.get("/mindconnect/agentinfo/:id", RED.auth.needsPermission("mindconnect.read"), (req, res) => __awaiter(this, void 0, void 0, function* () {
        const node = RED.nodes.getNode(req.params.id);
        try {
            if (!node) {
                throw new Error(`There is no node with id ${req.params.id}`);
            }
            const agent = node.agent;
            if (!agent) {
                throw new Error(`There is no agent configured at node with id ${req.params.id}`);
            }
            if (!agent.IsOnBoarded()) {
                yield agent.OnBoard();
            }
            const configuration = yield agent.GetDataSourceConfiguration();
            const mappings = yield agent.GetDataMappings();
            res.send({
                id: req.params.id,
                clientid: agent.ClientId(),
                isOnboarded: agent.IsOnBoarded(),
                configuration: configuration,
                mappings: mappings,
            });
        }
        catch (err) {
            res.send({ error: `${err.message || JSON.stringify(err)}` });
            node.status({
                fill: "red",
                shape: "dot",
                text: `Error occured:  ${err.message || JSON.stringify(err)}`,
            });
        }
    }));
    RED.httpAdmin.get("/mindconnect/assets/:id/:assetid", RED.auth.needsPermission("mindconnect.read"), (req, res) => __awaiter(this, void 0, void 0, function* () {
        const node = RED.nodes.getNode(req.params.id);
        try {
            if (!node) {
                throw new Error(`There is no node with id ${req.params.id}`);
            }
            const agent = node.agent;
            if (!agent) {
                throw new Error(`There is no agent configured at node with id ${req.params.id}`);
            }
            if (!agent.IsOnBoarded()) {
                yield agent.OnBoard();
            }
            const asset = yield agent.Sdk().GetAssetManagementClient().GetAsset(req.params.assetid);
            res.send(asset);
        }
        catch (err) {
            res.send({ error: `${err.message || JSON.stringify(err)}` });
            node.status({
                fill: "red",
                shape: "dot",
                text: `Error occured:  ${err.message || JSON.stringify(err)}`,
            });
        }
    }));
    RED.httpAdmin.get("/mindconnect/asset/:id/:filter", RED.auth.needsPermission("mindconnect.read"), (req, res) => __awaiter(this, void 0, void 0, function* () {
        const node = RED.nodes.getNode(req.params.id);
        try {
            // console.log(req.params.id, node);
            if (!node) {
                throw new Error(`There is no node with id ${req.params.id}`);
            }
            const agent = node.agent;
            if (!agent) {
                throw new Error(`There is no agent configured at node with id ${req.params.id}`);
            }
            if (!agent.IsOnBoarded()) {
                yield agent.OnBoard();
            }
            const am = agent.Sdk().GetAssetManagementClient();
            const filter = req.params.filter === "root"
                ? JSON.stringify({
                    not: {
                        typeId: {
                            startsWith: "core",
                        },
                    },
                })
                : JSON.stringify({
                    or: {
                        typeId: {
                            contains: `${req.params.filter}`,
                        },
                        name: {
                            contains: `${req.params.filter}`,
                        },
                    },
                });
            const children = yield am.GetAssets({
                size: 2000,
                filter: filter,
            });
            res.send(children);
        }
        catch (err) {
            res.send({ error: `${err.message || JSON.stringify(err)}` });
            node.status({
                fill: "red",
                shape: "dot",
                text: `Error occured:  ${err.message || JSON.stringify(err)}`,
            });
        }
    }));
    RED.httpAdmin.post("/mindconnect/assets/:id/:assetid", RED.auth.needsPermission("mindconnect.write"), (req, res) => __awaiter(this, void 0, void 0, function* () {
        const node = RED.nodes.getNode(req.params.id);
        // console.log(RED.auth.needsPermission("flows.write")());
        try {
            if (!node) {
                throw new Error(`There is no node with id ${req.params.id}`);
            }
            const agent = node.agent;
            if (!agent) {
                throw new Error(`There is no agent configured at node with id ${req.params.id}`);
            }
            yield agent.DeleteAllMappings();
            yield agent.ConfigureAgentForAssetId(req.params.assetid);
            node.status({
                fill: "green",
                shape: "dot",
                text: `successfully auto-configured agent for ${req.params.assetid}`,
            });
            res.send({ id: req.params.id, clientid: agent.ClientId(), isOnboarded: agent.IsOnBoarded() });
        }
        catch (err) {
            res.send({ error: `${err.message || JSON.stringify(err)}` });
            node.status({
                fill: "red",
                shape: "dot",
                text: `Error occured:  ${err.message || JSON.stringify(err)}`,
            });
        }
    }));
}
exports.RegisterHttpHandlers = RegisterHttpHandlers;
//# sourceMappingURL=http-handlers.js.map